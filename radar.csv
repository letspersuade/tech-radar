name,ring,quadrant,isNew,description
C#,adopt,Languages and Frameworks,true,"<a href='https://docs.microsoft.com/en-us/dotnet/csharp/'>C#</a> is our language of choice. It's strongly-typed, blends functional and object-oriented programming and works on all the OS we need to support."
TypeScript,adopt,Languages and Frameworks,true,<a href='https://www.typescriptlang.org/'>TypeScript</a> is our default choice for running code in the browser. It's strongly-typed and smoothes out the rough bits of JavaScript.
.NET 6,adopt,Languages and Frameworks,true,"<a href='https://dotnet.microsoft.com/'>.NET 6</a> is in Long Term Support (LTS). It is cross-platform and a great choice for desktop, web and cloud-based applications."
React,adopt,Languages and Frameworks,true,<a href='https://reactjs.org/'>React</a> makes it painless to create interactive UIs.
Blazor.Net,trial,Languages and Frameworks,true,"<a href='https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor'>Blazor</a> is super exciting. It means we might get to leverage our existing C# skills in the browser. It's too early for Persuade to commit to using this in production, so it's in assess so we can keep a good understanding of developments in this area."
SignalR,trial,Languages and Frameworks,true,<a href='https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-5.0'>SignalR</a> is our default choice for push-functionality.
PowerShell,hold,Languages and Frameworks,true,Don't use PowerShell for new projects - prefer Bash.
Object–relational mappers (ORMs),hold,Languages and Frameworks,true,"Unless working with a large number of simple entities, prefer writing SQL directly or using a lightweight object mapper such as <a href='https://github.com/DapperLib/Dapper'>Dapper</a>."
Visual Studio,adopt,Tools,true,Visual Studio is our default IDE for developing in C#. We get the Enterprise edition via our MSDN subscription.
Rider,adopt,Tools,true,Many teams use Rider instead of Visual Studio for their development. We have licenses for it.
VS Code,adopt,Tools,true,A free lightweight IDE. Our text editor of choice.
IntelliJ,adopt,Tools,true,An IDE for Java with a wide range of tools and plugins avalible. We have licenses for it.
GitHub,adopt,Tools,true,All development should use GitHub.
GitHub Actions,adopt,Tools,true,"GitHub Actions has been assessed as not a suitable replacement for CI, but is being adopted for releases, and may be useful for automating team processes."
Application Insights,adopt,Tools,true,All applications should use Application Insights as the default developer telemetry platform (incl. feature usage and error reporting).
Hashicorp Vault,adopt,Tools,true,We recommend <a href='https://www.vaultproject.io/'>Hashicorp Vault</a> for storing secrets.
Docker,adopt,Tools,true,"Docker should be used as the default containerisation technology. Used for building, testing and deployment."
Terraform,trial,Tools,true,Used for automating infrastructure provisioning.
Circle CI,trial,Tools,true,"Teams can use more of a self-serve model for build infrastructure. We looked at a number of cloud CI providers, and Circle CI offers what we need."
gRPC,assess,Tools,true,"<a href='https://grpc.io/'>gRPC</a> is a high-performance RPC framework which we may investigate for high-volume data collection (for example, SQL Monitor)."
Makefiles,assess,Tools,true,"Should we fall back to using Makefiles as part of a simpler build process? Again, this is part of our desire to simplify our build process."
Cake,assess,Tools,true,<a href='https://cakebuild.net/'>Cake</a> is a free and OSS cross-platform build automation system with a C# DSL.
Feature Flagging vendors (Launch Darkly?),assess,Tools,true,If your usage of feature flagging becomes sufficiently complicated then it's time to investigate third-party vendors.
Azure DevOps,hold,Tools,true,"We expect Microsoft will prioritize GitHub Actions over Azure DevOps for future development, so Azure DevOps is not recommended for new projects."
Kubernetes,adopt,Platforms,true,<a href='https://kubernetes.io/'>K8S</a> is the undeniable winner of orchestration tools.
RESTful APIs,adopt,Techniques,true,A REST architectural style is our default choice for building web APIs. Deviations can be made when it makes sense to do so.
Infrastructure as code,adopt,Techniques,true,Infrastructure should be provisioned through code rather than manually (except for ad-hoc testing)
Automated code style settings,adopt,Techniques,true,Codebases should be formatted consistently. Automated code-style settings achieve this without fuss.
Containerization,adopt,Techniques,true,"Where possible, all new products should be built to be containerised. We should ship the Mac/Linux versions of our products inside Docker containers."
Semantic Versioning,adopt,Techniques,true,We should use semver for all our versioning needs unless there's a compelling reason not to.
Feature Flags,adopt,Techniques,true,"Feature Flags are a great technique for minimizing long-lived feature branches. Our recommendation is to focus on simplicity - if you find yourself writing substantial code to support Feature Flags, consider using a third-party solution."
CI/CD,adopt,Techniques,true,Products should be ready for release at any time.
Build inside Docker containers,adopt,Techniques,true,We should reduce build dependencies by building and testing our products inside containers. This is a pre-requisite for performing builds on cloud based CI providers.
AI/ML,assess,Techniques,true,"AI/ML are becoming commoditized. Off-the-shelf software is available for predictive modelling, text analysis, anomaly detection and much more."
Automation/Low-code solutions,assess,Techniques,true,"Remote is driving a digital transformation across industries. Low-code solutions, such as Power Apps, allow organizations to modernize these processes."
Git Ops,trial,Techniques,true,"The core idea of GitOps is having a Git repository that always contains declarative descriptions of the infrastructure currently desired in the production environment and an automated process to make the production environment match the described state in the repository. If you want to deploy a new application or update an existing one, you only need to update the repository - the automated process handles everything else. It’s like having cruise control for managing your applications in production. <a href='https://www.gitops.tech/'>Read more</a>, currently being trialled for Platform Hosted"